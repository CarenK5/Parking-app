import * as coreAuth from '@azure/core-auth';
import * as coreClient from '@azure/core-client';
import { PagedAsyncIterableIterator } from '@azure/core-paging';

/** Interface representing a Accounts. */
export declare interface Accounts {
    /**
     * Get all Maps Accounts in a Resource Group
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: AccountsListByResourceGroupOptionalParams): PagedAsyncIterableIterator<MapsAccount>;
    /**
     * Get all Maps Accounts in a Subscription
     * @param options The options parameters.
     */
    listBySubscription(options?: AccountsListBySubscriptionOptionalParams): PagedAsyncIterableIterator<MapsAccount>;
    /**
     * Create or update a Maps Account. A Maps Account holds the keys which allow access to the Maps REST
     * APIs.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of the Maps Account.
     * @param mapsAccount The new or updated parameters for the Maps Account.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, accountName: string, mapsAccount: MapsAccount, options?: AccountsCreateOrUpdateOptionalParams): Promise<AccountsCreateOrUpdateResponse>;
    /**
     * Updates a Maps Account. Only a subset of the parameters may be updated after creation, such as Sku,
     * Tags, Properties.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of the Maps Account.
     * @param mapsAccountUpdateParameters The updated parameters for the Maps Account.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, accountName: string, mapsAccountUpdateParameters: MapsAccountUpdateParameters, options?: AccountsUpdateOptionalParams): Promise<AccountsUpdateResponse>;
    /**
     * Delete a Maps Account.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of the Maps Account.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, accountName: string, options?: AccountsDeleteOptionalParams): Promise<void>;
    /**
     * Get a Maps Account.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of the Maps Account.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, accountName: string, options?: AccountsGetOptionalParams): Promise<AccountsGetResponse>;
    /**
     * Create and list an account shared access signature token. Use this SAS token for authentication to
     * Azure Maps REST APIs through various Azure Maps SDKs. As prerequisite to create a SAS Token.
     *
     * Prerequisites:
     * 1. Create or have an existing User Assigned Managed Identity in the same Azure region as the
     * account.
     * 2. Create or update an Azure Map account with the same Azure region as the User Assigned Managed
     * Identity is placed.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of the Maps Account.
     * @param mapsAccountSasParameters The updated parameters for the Maps Account.
     * @param options The options parameters.
     */
    listSas(resourceGroupName: string, accountName: string, mapsAccountSasParameters: AccountSasParameters, options?: AccountsListSasOptionalParams): Promise<AccountsListSasResponse>;
    /**
     * Get the keys to use with the Maps APIs. A key is used to authenticate and authorize access to the
     * Maps REST APIs. Only one key is needed at a time; two are given to provide seamless key
     * regeneration.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of the Maps Account.
     * @param options The options parameters.
     */
    listKeys(resourceGroupName: string, accountName: string, options?: AccountsListKeysOptionalParams): Promise<AccountsListKeysResponse>;
    /**
     * Regenerate either the primary or secondary key for use with the Maps APIs. The old key will stop
     * working immediately.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of the Maps Account.
     * @param keySpecification Which key to regenerate:  primary or secondary.
     * @param options The options parameters.
     */
    regenerateKeys(resourceGroupName: string, accountName: string, keySpecification: MapsKeySpecification, options?: AccountsRegenerateKeysOptionalParams): Promise<AccountsRegenerateKeysResponse>;
}

/** Parameters used to create an account Shared Access Signature (SAS) token. The REST API access control is provided by Azure Maps Role Based Access (RBAC) identity and access. */
export declare interface AccountSasParameters {
    /** The Map account key to use for signing. Picking `primaryKey` or `secondaryKey` will use the Map account Shared Keys, and using `managedIdentity` will use the auto-renewed private key to sign the SAS. */
    signingKey: SigningKey;
    /** The principal Id also known as the object Id of a User Assigned Managed Identity currently assigned to the Map Account. To assign a Managed Identity of the account, use operation Create or Update an assign a User Assigned Identity resource Id. */
    principalId: string;
    /** Optional, allows control of which region locations are permitted access to Azure Maps REST APIs with the SAS token. Example: "eastus", "westus2". Omitting this parameter will allow all region locations to be accessible. */
    regions?: string[];
    /** Required parameter which represents the desired maximum request per second to allowed for the given SAS token. This does not guarantee perfect accuracy in measurements but provides application safe guards of abuse with eventual enforcement. */
    maxRatePerSecond: number;
    /** The date time offset of when the token validity begins. For example "2017-05-24T10:42:03.1567373Z". Maximum duration allowed is 24 hours between `start` and `expiry`. */
    start: string;
    /** The date time offset of when the token validity expires. For example "2017-05-24T10:42:03.1567373Z". Maximum duration allowed is 24 hours between `start` and `expiry`. */
    expiry: string;
}

/** Optional parameters. */
export declare interface AccountsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type AccountsCreateOrUpdateResponse = MapsAccount;

/** Optional parameters. */
export declare interface AccountsDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface AccountsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type AccountsGetResponse = MapsAccount;

/** Optional parameters. */
export declare interface AccountsListByResourceGroupNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroupNext operation. */
export declare type AccountsListByResourceGroupNextResponse = MapsAccounts;

/** Optional parameters. */
export declare interface AccountsListByResourceGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroup operation. */
export declare type AccountsListByResourceGroupResponse = MapsAccounts;

/** Optional parameters. */
export declare interface AccountsListBySubscriptionNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscriptionNext operation. */
export declare type AccountsListBySubscriptionNextResponse = MapsAccounts;

/** Optional parameters. */
export declare interface AccountsListBySubscriptionOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscription operation. */
export declare type AccountsListBySubscriptionResponse = MapsAccounts;

/** Optional parameters. */
export declare interface AccountsListKeysOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listKeys operation. */
export declare type AccountsListKeysResponse = MapsAccountKeys;

/** Optional parameters. */
export declare interface AccountsListSasOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listSas operation. */
export declare type AccountsListSasResponse = MapsAccountSasToken;

/** Optional parameters. */
export declare interface AccountsRegenerateKeysOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the regenerateKeys operation. */
export declare type AccountsRegenerateKeysResponse = MapsAccountKeys;

/** Optional parameters. */
export declare interface AccountsUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type AccountsUpdateResponse = MapsAccount;

export declare class AzureMapsManagementClient extends coreClient.ServiceClient {
    $host: string;
    apiVersion: string;
    subscriptionId?: string;
    /**
     * Initializes a new instance of the AzureMapsManagementClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The ID of the target subscription.
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, subscriptionId: string, options?: AzureMapsManagementClientOptionalParams);
    constructor(credentials: coreAuth.TokenCredential, options?: AzureMapsManagementClientOptionalParams);
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    private addCustomApiVersionPolicy;
    accounts: Accounts;
    maps: Maps;
    creators: Creators;
}

/** Optional parameters. */
export declare interface AzureMapsManagementClientOptionalParams extends coreClient.ServiceClientOptions {
    /** server parameter */
    $host?: string;
    /** Api Version */
    apiVersion?: string;
    /** Overrides client endpoint. */
    endpoint?: string;
}

/** Specifies a CORS rule for the Map Account. */
export declare interface CorsRule {
    /** Required if CorsRule element is present. A list of origin domains that will be allowed via CORS, or "*" to allow all domains */
    allowedOrigins: string[];
}

/** Sets the CORS rules. You can include up to five CorsRule elements in the request. */
export declare interface CorsRules {
    /** The list of CORS rules. You can include up to five CorsRule elements in the request. */
    corsRules?: CorsRule[];
}

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export declare type CreatedByType = string;

/** An Azure resource which represents Maps Creator product and provides ability to manage private location data. */
export declare interface Creator extends TrackedResource {
    /** The Creator resource properties. */
    properties: CreatorProperties;
    /**
     * The system meta data relating to this resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
}

/** A list of Creator resources. */
export declare interface CreatorList {
    /**
     * a Creator account.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: Creator[];
    /**
     * URL client should use to fetch the next page (per server side paging).
     * It's null for now, added for future use.
     */
    nextLink?: string;
}

/** Creator resource properties */
export declare interface CreatorProperties {
    /**
     * The state of the resource provisioning, terminal states: Succeeded, Failed, Canceled
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: string;
    /** The storage units to be allocated. Integer values from 1 to 100, inclusive. */
    storageUnits: number;
}

/** Interface representing a Creators. */
export declare interface Creators {
    /**
     * Get all Creator instances for an Azure Maps Account
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of the Maps Account.
     * @param options The options parameters.
     */
    listByAccount(resourceGroupName: string, accountName: string, options?: CreatorsListByAccountOptionalParams): PagedAsyncIterableIterator<Creator>;
    /**
     * Create or update a Maps Creator resource. Creator resource will manage Azure resources required to
     * populate a custom set of mapping data. It requires an account to exist before it can be created.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of the Maps Account.
     * @param creatorName The name of the Maps Creator instance.
     * @param creatorResource The new or updated parameters for the Creator resource.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, accountName: string, creatorName: string, creatorResource: Creator, options?: CreatorsCreateOrUpdateOptionalParams): Promise<CreatorsCreateOrUpdateResponse>;
    /**
     * Updates the Maps Creator resource. Only a subset of the parameters may be updated after creation,
     * such as Tags.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of the Maps Account.
     * @param creatorName The name of the Maps Creator instance.
     * @param creatorUpdateParameters The update parameters for Maps Creator.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, accountName: string, creatorName: string, creatorUpdateParameters: CreatorUpdateParameters, options?: CreatorsUpdateOptionalParams): Promise<CreatorsUpdateResponse>;
    /**
     * Delete a Maps Creator resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of the Maps Account.
     * @param creatorName The name of the Maps Creator instance.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, accountName: string, creatorName: string, options?: CreatorsDeleteOptionalParams): Promise<void>;
    /**
     * Get a Maps Creator resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of the Maps Account.
     * @param creatorName The name of the Maps Creator instance.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, accountName: string, creatorName: string, options?: CreatorsGetOptionalParams): Promise<CreatorsGetResponse>;
}

/** Optional parameters. */
export declare interface CreatorsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type CreatorsCreateOrUpdateResponse = Creator;

/** Optional parameters. */
export declare interface CreatorsDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface CreatorsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type CreatorsGetResponse = Creator;

/** Optional parameters. */
export declare interface CreatorsListByAccountNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByAccountNext operation. */
export declare type CreatorsListByAccountNextResponse = CreatorList;

/** Optional parameters. */
export declare interface CreatorsListByAccountOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByAccount operation. */
export declare type CreatorsListByAccountResponse = CreatorList;

/** Optional parameters. */
export declare interface CreatorsUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type CreatorsUpdateResponse = Creator;

/** Parameters used to update an existing Creator resource. */
export declare interface CreatorUpdateParameters {
    /** Gets or sets a list of key value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. */
    tags?: {
        [propertyName: string]: string;
    };
    /**
     * The state of the resource provisioning, terminal states: Succeeded, Failed, Canceled
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: string;
    /** The storage units to be allocated. Integer values from 1 to 100, inclusive. */
    storageUnits?: number;
}

/** All Customer-managed key encryption properties for the resource. */
export declare interface CustomerManagedKeyEncryption {
    /** All identity configuration for Customer-managed key settings defining which identity should be used to auth to Key Vault. */
    keyEncryptionKeyIdentity?: CustomerManagedKeyEncryptionKeyIdentity;
    /** key encryption key Url, versioned or non-versioned. Ex: https://contosovault.vault.azure.net/keys/contosokek/562a4bb76b524a1493a6afe8e536ee78 or https://contosovault.vault.azure.net/keys/contosokek. */
    keyEncryptionKeyUrl?: string;
}

/** All identity configuration for Customer-managed key settings defining which identity should be used to auth to Key Vault. */
export declare interface CustomerManagedKeyEncryptionKeyIdentity {
    /** Values can be systemAssignedIdentity or userAssignedIdentity */
    identityType?: IdentityType;
    /** user assigned identity to use for accessing key encryption key Url. Ex: /subscriptions/fa5fc227-a624-475e-b696-cdd604c735bc/resourceGroups/<resource group>/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myId. Mutually exclusive with identityType systemAssignedIdentity and delegatedResourceIdentity. */
    userAssignedIdentityResourceId?: string;
    /** delegated identity to use for accessing key encryption key Url. Ex: /subscriptions/fa5fc227-a624-475e-b696-cdd604c735bc/resourceGroups/<resource group>/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myId. Mutually exclusive with identityType systemAssignedIdentity and userAssignedIdentity - internal use only. */
    delegatedIdentityClientId?: string;
}

/** Dimension of map account, for example API Category, Api Name, Result Type, and Response Code. */
export declare interface Dimension {
    /** Display name of dimension. */
    name?: string;
    /** Display name of dimension. */
    displayName?: string;
    /** Internal name of the dimension. */
    internalName?: string;
    /** Internal metric name of the dimension. */
    internalMetricName?: string;
    /** Source Mdm Namespace of the dimension. */
    sourceMdmNamespace?: string;
    /** Flag to indicate exporting to Azure Monitor. */
    toBeExportedToShoebox?: boolean;
}

/** (Optional) Discouraged to include in resource definition. Only needed where it is possible to disable platform (AKA infrastructure) encryption. Azure SQL TDE is an example of this. Values are enabled and disabled. */
export declare interface Encryption {
    /** Values are enabled and disabled. */
    infrastructureEncryption?: InfrastructureEncryption;
    /** All Customer-managed key encryption properties for the resource. */
    customerManagedKeyEncryption?: CustomerManagedKeyEncryption;
}

/** The resource management error additional info. */
export declare interface ErrorAdditionalInfo {
    /**
     * The additional info type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * The additional info.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly info?: Record<string, unknown>;
}

/** The error detail. */
export declare interface ErrorDetail {
    /**
     * The error code.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly code?: string;
    /**
     * The error message.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly message?: string;
    /**
     * The error target.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly target?: string;
    /**
     * The error details.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly details?: ErrorDetail[];
    /**
     * The error additional info.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly additionalInfo?: ErrorAdditionalInfo[];
}

/** Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.). */
export declare interface ErrorResponse {
    /** The error object. */
    error?: ErrorDetail;
}

/**
 * Given the last `.value` produced by the `byPage` iterator,
 * returns a continuation token that can be used to begin paging from
 * that point later.
 * @param page An object from accessing `value` on the IteratorResult from a `byPage` iterator.
 * @returns The continuation token that can be passed into byPage() during future calls.
 */
export declare function getContinuationToken(page: unknown): string | undefined;

/**
 * Defines values for IdentityType. \
 * {@link KnownIdentityType} can be used interchangeably with IdentityType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **systemAssignedIdentity** \
 * **userAssignedIdentity** \
 * **delegatedResourceIdentity**
 */
export declare type IdentityType = string;

/**
 * Defines values for InfrastructureEncryption. \
 * {@link KnownInfrastructureEncryption} can be used interchangeably with InfrastructureEncryption,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **enabled** \
 * **disabled**
 */
export declare type InfrastructureEncryption = string;

/**
 * Defines values for KeyType. \
 * {@link KnownKeyType} can be used interchangeably with KeyType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **primary** \
 * **secondary**
 */
declare type KeyType_2 = string;
export { KeyType_2 as KeyType }

/**
 * Defines values for Kind. \
 * {@link KnownKind} can be used interchangeably with Kind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Gen1** \
 * **Gen2**
 */
export declare type Kind = string;

/** Known values of {@link CreatedByType} that the service accepts. */
export declare enum KnownCreatedByType {
    /** User */
    User = "User",
    /** Application */
    Application = "Application",
    /** ManagedIdentity */
    ManagedIdentity = "ManagedIdentity",
    /** Key */
    Key = "Key"
}

/** Known values of {@link IdentityType} that the service accepts. */
export declare enum KnownIdentityType {
    /** SystemAssignedIdentity */
    SystemAssignedIdentity = "systemAssignedIdentity",
    /** UserAssignedIdentity */
    UserAssignedIdentity = "userAssignedIdentity",
    /** DelegatedResourceIdentity */
    DelegatedResourceIdentity = "delegatedResourceIdentity"
}

/** Known values of {@link InfrastructureEncryption} that the service accepts. */
export declare enum KnownInfrastructureEncryption {
    /** Enabled */
    Enabled = "enabled",
    /** Disabled */
    Disabled = "disabled"
}

/** Known values of {@link KeyType} that the service accepts. */
export declare enum KnownKeyType {
    /** Primary */
    Primary = "primary",
    /** Secondary */
    Secondary = "secondary"
}

/** Known values of {@link Kind} that the service accepts. */
export declare enum KnownKind {
    /** Gen1 */
    Gen1 = "Gen1",
    /** Gen2 */
    Gen2 = "Gen2"
}

/** Known values of {@link ManagedServiceIdentityType} that the service accepts. */
export declare enum KnownManagedServiceIdentityType {
    /** None */
    None = "None",
    /** SystemAssigned */
    SystemAssigned = "SystemAssigned",
    /** UserAssigned */
    UserAssigned = "UserAssigned",
    /** SystemAssignedUserAssigned */
    SystemAssignedUserAssigned = "SystemAssigned, UserAssigned"
}

/** Known values of {@link Name} that the service accepts. */
export declare enum KnownName {
    /** S0 */
    S0 = "S0",
    /** S1 */
    S1 = "S1",
    /** G2 */
    G2 = "G2"
}

/** Known values of {@link SigningKey} that the service accepts. */
export declare enum KnownSigningKey {
    /** PrimaryKey */
    PrimaryKey = "primaryKey",
    /** SecondaryKey */
    SecondaryKey = "secondaryKey",
    /** ManagedIdentity */
    ManagedIdentity = "managedIdentity"
}

/** Linked resource is reference to a resource deployed in an Azure subscription, add the linked resource `uniqueName` value as an optional parameter for operations on Azure Maps Geospatial REST APIs. */
export declare interface LinkedResource {
    /** A provided name which uniquely identifies the linked resource. */
    uniqueName: string;
    /** ARM resource id in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/accounts/{storageName}'. */
    id: string;
}

/** Managed service identity (system assigned and/or user assigned identities) */
export declare interface ManagedServiceIdentity {
    /**
     * The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly principalId?: string;
    /**
     * The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly tenantId?: string;
    /** Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed). */
    type: ManagedServiceIdentityType;
    /** The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests. */
    userAssignedIdentities?: {
        [propertyName: string]: UserAssignedIdentity;
    };
}

/**
 * Defines values for ManagedServiceIdentityType. \
 * {@link KnownManagedServiceIdentityType} can be used interchangeably with ManagedServiceIdentityType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **SystemAssigned** \
 * **UserAssigned** \
 * **SystemAssigned, UserAssigned**
 */
export declare type ManagedServiceIdentityType = string;

/** Interface representing a Maps. */
export declare interface Maps {
    /**
     * List operations available for the Maps Resource Provider
     * @param options The options parameters.
     */
    listOperations(options?: MapsListOperationsOptionalParams): PagedAsyncIterableIterator<OperationDetail>;
    /**
     * List operations available for the Maps Resource Provider
     * @param options The options parameters.
     */
    listSubscriptionOperations(options?: MapsListSubscriptionOperationsOptionalParams): PagedAsyncIterableIterator<OperationDetail>;
}

/** An Azure resource which represents access to a suite of Maps REST APIs. */
export declare interface MapsAccount extends TrackedResource {
    /** The SKU of this account. */
    sku: Sku;
    /** Get or Set Kind property. */
    kind?: Kind;
    /**
     * Metadata pertaining to creation and last modification of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /** Managed service identity (system assigned and/or user assigned identities) */
    identity?: ManagedServiceIdentity;
    /** The map account properties. */
    properties?: MapsAccountProperties;
}

/** The set of keys which can be used to access the Maps REST APIs. Two keys are provided for key rotation without interruption. */
export declare interface MapsAccountKeys {
    /**
     * The last updated date and time of the primary key.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly primaryKeyLastUpdated?: string;
    /**
     * The primary key for accessing the Maps REST APIs.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly primaryKey?: string;
    /**
     * The secondary key for accessing the Maps REST APIs.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly secondaryKey?: string;
    /**
     * The last updated date and time of the secondary key.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly secondaryKeyLastUpdated?: string;
}

/** Additional Map account properties */
export declare interface MapsAccountProperties {
    /**
     * A unique identifier for the maps account
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly uniqueId?: string;
    /** Allows toggle functionality on Azure Policy to disable Azure Maps local authentication support. This will disable Shared Keys and Shared Access Signature Token authentication from any usage. */
    disableLocalAuth?: boolean;
    /**
     * The provisioning state of the Map account resource, Account updates can only be performed on terminal states. Terminal states: `Succeeded` and `Failed`
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: string;
    /** The array of associated resources to the Map account. Linked resource in the array cannot individually update, you must update all linked resources in the array together. These resources may be used on operations on the Azure Maps REST API. Access is controlled by the Map Account Managed Identity(s) permissions to those resource(s). */
    linkedResources?: LinkedResource[];
    /** Specifies CORS rules for the Blob service. You can include up to five CorsRule elements in the request. If no CorsRule elements are included in the request body, all CORS rules will be deleted, and CORS will be disabled for the Blob service. */
    cors?: CorsRules;
    /** (Optional) Discouraged to include in resource definition. Only needed where it is possible to disable platform (AKA infrastructure) encryption. Azure SQL TDE is an example of this. Values are enabled and disabled. */
    encryption?: Encryption;
}

/** A list of Maps Accounts. */
export declare interface MapsAccounts {
    /**
     * a Maps Account.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: MapsAccount[];
    /**
     * URL client should use to fetch the next page (per server side paging).
     * It's null for now, added for future use.
     */
    nextLink?: string;
}

/** A new Sas token which can be used to access the Maps REST APIs and is controlled by the specified Managed identity permissions on Azure (IAM) Role Based Access Control. */
export declare interface MapsAccountSasToken {
    /**
     * The shared access signature access token.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly accountSasToken?: string;
}

/** Parameters used to update an existing Maps Account. */
export declare interface MapsAccountUpdateParameters {
    /** Gets or sets a list of key value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. */
    tags?: {
        [propertyName: string]: string;
    };
    /** Get or Set Kind property. */
    kind?: Kind;
    /** The SKU of this account. */
    sku?: Sku;
    /** Managed service identity (system assigned and/or user assigned identities) */
    identity?: ManagedServiceIdentity;
    /**
     * A unique identifier for the maps account
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly uniqueId?: string;
    /** Allows toggle functionality on Azure Policy to disable Azure Maps local authentication support. This will disable Shared Keys and Shared Access Signature Token authentication from any usage. */
    disableLocalAuth?: boolean;
    /**
     * The provisioning state of the Map account resource, Account updates can only be performed on terminal states. Terminal states: `Succeeded` and `Failed`
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: string;
    /** The array of associated resources to the Map account. Linked resource in the array cannot individually update, you must update all linked resources in the array together. These resources may be used on operations on the Azure Maps REST API. Access is controlled by the Map Account Managed Identity(s) permissions to those resource(s). */
    linkedResources?: LinkedResource[];
    /** Specifies CORS rules for the Blob service. You can include up to five CorsRule elements in the request. If no CorsRule elements are included in the request body, all CORS rules will be deleted, and CORS will be disabled for the Blob service. */
    cors?: CorsRules;
    /** (Optional) Discouraged to include in resource definition. Only needed where it is possible to disable platform (AKA infrastructure) encryption. Azure SQL TDE is an example of this. Values are enabled and disabled. */
    encryption?: Encryption;
}

/** Whether the operation refers to the primary or secondary key. */
export declare interface MapsKeySpecification {
    /** Whether the operation refers to the primary or secondary key. */
    keyType: KeyType_2;
}

/** Optional parameters. */
export declare interface MapsListOperationsNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listOperationsNext operation. */
export declare type MapsListOperationsNextResponse = MapsOperations;

/** Optional parameters. */
export declare interface MapsListOperationsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listOperations operation. */
export declare type MapsListOperationsResponse = MapsOperations;

/** Optional parameters. */
export declare interface MapsListSubscriptionOperationsNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listSubscriptionOperationsNext operation. */
export declare type MapsListSubscriptionOperationsNextResponse = MapsOperations;

/** Optional parameters. */
export declare interface MapsListSubscriptionOperationsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listSubscriptionOperations operation. */
export declare type MapsListSubscriptionOperationsResponse = MapsOperations;

/** The set of operations available for Maps. */
export declare interface MapsOperations {
    /**
     * An operation available for Maps.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: OperationDetail[];
    /**
     * URL client should use to fetch the next page (per server side paging).
     * It's null for now, added for future use.
     */
    nextLink?: string;
}

/** Metric specification of operation. */
export declare interface MetricSpecification {
    /** Name of metric specification. */
    name?: string;
    /** Display name of metric specification. */
    displayName?: string;
    /** Display description of metric specification. */
    displayDescription?: string;
    /** Unit could be Count. */
    unit?: string;
    /** Dimensions of map account. */
    dimensions?: Dimension[];
    /** Aggregation type could be Average. */
    aggregationType?: string;
    /** The property to decide fill gap with zero or not. */
    fillGapWithZero?: boolean;
    /** The category this metric specification belong to, could be Capacity. */
    category?: string;
    /** Account Resource Id. */
    resourceIdDimensionNameOverride?: string;
    /** Source metrics account. */
    sourceMdmAccount?: string;
    /** Internal metric name. */
    internalMetricName?: string;
    /** Lock aggregation type for metrics. */
    lockAggregationType?: string;
    /** Metrics namespace. */
    sourceMdmNamespace?: string;
    /** Allowed aggregation types for metrics. */
    supportedAggregationTypes?: string;
}

/**
 * Defines values for Name. \
 * {@link KnownName} can be used interchangeably with Name,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **S0** \
 * **S1** \
 * **G2**
 */
export declare type Name = string;

/** Operation detail payload */
export declare interface OperationDetail {
    /** Name of the operation */
    name?: string;
    /** Indicates whether the operation is a data action */
    isDataAction?: boolean;
    /** Display of the operation */
    display?: OperationDisplay;
    /** Origin of the operation */
    origin?: string;
    /** One property of operation, include metric specifications. */
    serviceSpecification?: ServiceSpecification;
}

/** Operation display payload */
export declare interface OperationDisplay {
    /** Resource provider of the operation */
    provider?: string;
    /** Resource of the operation */
    resource?: string;
    /** Localized friendly name for the operation */
    operation?: string;
    /** Localized friendly description for the operation */
    description?: string;
}

/** Common fields that are returned in the response for all Azure Resource Manager resources */
export declare interface Resource {
    /**
     * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The name of the resource
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
}

/** One property of operation, include metric specifications. */
export declare interface ServiceSpecification {
    /** Metric specifications of operation. */
    metricSpecifications?: MetricSpecification[];
}

/**
 * Defines values for SigningKey. \
 * {@link KnownSigningKey} can be used interchangeably with SigningKey,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **primaryKey** \
 * **secondaryKey** \
 * **managedIdentity**
 */
export declare type SigningKey = string;

/** The SKU of the Maps Account. */
export declare interface Sku {
    /** The name of the SKU, in standard format (such as S0). */
    name: Name;
    /**
     * Gets the sku tier. This is based on the SKU name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly tier?: string;
}

/** Metadata pertaining to creation and last modification of the resource. */
export declare interface SystemData {
    /** The identity that created the resource. */
    createdBy?: string;
    /** The type of identity that created the resource. */
    createdByType?: CreatedByType;
    /** The timestamp of resource creation (UTC). */
    createdAt?: Date;
    /** The identity that last modified the resource. */
    lastModifiedBy?: string;
    /** The type of identity that last modified the resource. */
    lastModifiedByType?: CreatedByType;
    /** The timestamp of resource last modification (UTC) */
    lastModifiedAt?: Date;
}

/** The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location' */
export declare interface TrackedResource extends Resource {
    /** Resource tags. */
    tags?: {
        [propertyName: string]: string;
    };
    /** The geo-location where the resource lives */
    location: string;
}

/** User assigned identity properties */
export declare interface UserAssignedIdentity {
    /**
     * The principal ID of the assigned identity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly principalId?: string;
    /**
     * The client ID of the assigned identity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly clientId?: string;
}

export { }
