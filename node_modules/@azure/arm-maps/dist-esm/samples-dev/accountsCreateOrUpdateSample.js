/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __awaiter } from "tslib";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { AzureMapsManagementClient } from "@azure/arm-maps";
import { DefaultAzureCredential } from "@azure/identity";
import * as dotenv from "dotenv";
dotenv.config();
/**
 * This sample demonstrates how to Create or update a Maps Account. A Maps Account holds the keys which allow access to the Maps REST APIs.
 *
 * @summary Create or update a Maps Account. A Maps Account holds the keys which allow access to the Maps REST APIs.
 * x-ms-original-file: specification/maps/resource-manager/Microsoft.Maps/stable/2023-06-01/examples/CreateAccountEncryption.json
 */
function createAccountWithEncryption() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["MAPS_SUBSCRIPTION_ID"] ||
            "21a9967a-e8a9-4656-a70b-96ff1c4d05a0";
        const resourceGroupName = process.env["MAPS_RESOURCE_GROUP"] || "myResourceGroup";
        const accountName = "myMapsAccount";
        const mapsAccount = {
            identity: {
                type: "UserAssigned",
                userAssignedIdentities: {
                    "/subscriptions/21a9967aE8a94656A70b96ff1c4d05a0/resourceGroups/myResourceGroup/providers/MicrosoftManagedIdentity/userAssignedIdentities/identityName": {}
                }
            },
            kind: "Gen2",
            location: "eastus",
            properties: {
                encryption: {
                    customerManagedKeyEncryption: {
                        keyEncryptionKeyIdentity: {
                            identityType: "userAssignedIdentity",
                            userAssignedIdentityResourceId: "/subscriptions/21a9967a-e8a9-4656-a70b-96ff1c4d05a0/resourceGroups/myResourceGroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identityName"
                        },
                        keyEncryptionKeyUrl: "https://contosovault.vault.azure.net/keys/contosokek"
                    }
                }
            },
            sku: { name: "G2" }
        };
        const credential = new DefaultAzureCredential();
        const client = new AzureMapsManagementClient(credential, subscriptionId);
        const result = yield client.accounts.createOrUpdate(resourceGroupName, accountName, mapsAccount);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Create or update a Maps Account. A Maps Account holds the keys which allow access to the Maps REST APIs.
 *
 * @summary Create or update a Maps Account. A Maps Account holds the keys which allow access to the Maps REST APIs.
 * x-ms-original-file: specification/maps/resource-manager/Microsoft.Maps/stable/2023-06-01/examples/CreateAccountManagedIdentity.json
 */
function createAccountWithManagedIdentities() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["MAPS_SUBSCRIPTION_ID"] ||
            "21a9967a-e8a9-4656-a70b-96ff1c4d05a0";
        const resourceGroupName = process.env["MAPS_RESOURCE_GROUP"] || "myResourceGroup";
        const accountName = "myMapsAccount";
        const mapsAccount = {
            identity: {
                type: "SystemAssigned, UserAssigned",
                userAssignedIdentities: {
                    "/subscriptions/21a9967aE8a94656A70b96ff1c4d05a0/resourceGroups/myResourceGroup/providers/MicrosoftManagedIdentity/userAssignedIdentities/identityName": {}
                }
            },
            kind: "Gen2",
            location: "eastus",
            properties: {
                disableLocalAuth: false,
                linkedResources: [
                    {
                        id: "/subscriptions/21a9967a-e8a9-4656-a70b-96ff1c4d05a0/resourceGroups/myResourceGroup/providers/Microsoft.Storage/accounts/mystorageacc",
                        uniqueName: "myBatchStorageAccount"
                    },
                    {
                        id: "/subscriptions/21a9967a-e8a9-4656-a70b-96ff1c4d05a0/resourceGroups/myResourceGroup/providers/Microsoft.Storage/accounts/mystorageacc",
                        uniqueName: "myBlobDataSource"
                    }
                ]
            },
            sku: { name: "G2" },
            tags: { test: "true" }
        };
        const credential = new DefaultAzureCredential();
        const client = new AzureMapsManagementClient(credential, subscriptionId);
        const result = yield client.accounts.createOrUpdate(resourceGroupName, accountName, mapsAccount);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Create or update a Maps Account. A Maps Account holds the keys which allow access to the Maps REST APIs.
 *
 * @summary Create or update a Maps Account. A Maps Account holds the keys which allow access to the Maps REST APIs.
 * x-ms-original-file: specification/maps/resource-manager/Microsoft.Maps/stable/2023-06-01/examples/CreateAccount.json
 */
function createGen1Account() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["MAPS_SUBSCRIPTION_ID"] ||
            "21a9967a-e8a9-4656-a70b-96ff1c4d05a0";
        const resourceGroupName = process.env["MAPS_RESOURCE_GROUP"] || "myResourceGroup";
        const accountName = "myMapsAccount";
        const mapsAccount = {
            kind: "Gen1",
            location: "eastus",
            properties: {
                cors: {
                    corsRules: [
                        {
                            allowedOrigins: [
                                "http://www.contoso.com",
                                "http://www.fabrikam.com"
                            ]
                        }
                    ]
                },
                disableLocalAuth: false
            },
            sku: { name: "S0" },
            tags: { test: "true" }
        };
        const credential = new DefaultAzureCredential();
        const client = new AzureMapsManagementClient(credential, subscriptionId);
        const result = yield client.accounts.createOrUpdate(resourceGroupName, accountName, mapsAccount);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Create or update a Maps Account. A Maps Account holds the keys which allow access to the Maps REST APIs.
 *
 * @summary Create or update a Maps Account. A Maps Account holds the keys which allow access to the Maps REST APIs.
 * x-ms-original-file: specification/maps/resource-manager/Microsoft.Maps/stable/2023-06-01/examples/CreateAccountGen2.json
 */
function createGen2Account() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["MAPS_SUBSCRIPTION_ID"] ||
            "21a9967a-e8a9-4656-a70b-96ff1c4d05a0";
        const resourceGroupName = process.env["MAPS_RESOURCE_GROUP"] || "myResourceGroup";
        const accountName = "myMapsAccount";
        const mapsAccount = {
            kind: "Gen2",
            location: "eastus",
            properties: {
                cors: {
                    corsRules: [
                        {
                            allowedOrigins: [
                                "http://www.contoso.com",
                                "http://www.fabrikam.com"
                            ]
                        }
                    ]
                },
                disableLocalAuth: true
            },
            sku: { name: "G2" },
            tags: { test: "true" }
        };
        const credential = new DefaultAzureCredential();
        const client = new AzureMapsManagementClient(credential, subscriptionId);
        const result = yield client.accounts.createOrUpdate(resourceGroupName, accountName, mapsAccount);
        console.log(result);
    });
}
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        createAccountWithEncryption();
        createAccountWithManagedIdentities();
        createGen1Account();
        createGen2Account();
    });
}
main().catch(console.error);
//# sourceMappingURL=accountsCreateOrUpdateSample.js.map